* Plugins
** Beacon
#+BEGIN_SRC emacs-lisp
  (use-package beacon
    :ensure t
    :init
    (beacon-mode 1))
#+END_SRC
** Async 
#+BEGIN_SRC emacs-lisp
  (use-package async
    :ensure t
    :init
    (async-bytecomp-package-mode 1))
#+END_SRC
** General
#+BEGIN_SRC emacs-lisp
  (use-package general
    :ensure t)
#+END_SRC
** Hydra
#+BEGIN_SRC emacs-lisp
  (use-package hydra
    :ensure t)
#+END_SRC
** Ivy
#+BEGIN_SRC emacs-lisp
  (use-package counsel
    :ensure t)

     (defun ivy-rich-switch-buffer-icon (candidate)
       (with-current-buffer
	    (get-buffer candidate)
	  (let ((icon (all-the-icons-icon-for-mode major-mode)))
	    (if (symbolp icon)
		(all-the-icons-icon-for-mode 'fundamental-mode)
	      icon))))

  (setq ivy-rich--display-transformers-list
	'(ivy-switch-buffer
	  (:columns
	   ((ivy-rich-switch-buffer-icon (:width 2))
	    (ivy-rich-candidate (:width 30))
	    (ivy-rich-switch-buffer-size (:width 7))
	    (ivy-rich-switch-buffer-indicators (:width 4 :face error :align right))
	    (ivy-rich-switch-buffer-major-mode (:width 12 :face warning))
	    (ivy-rich-switch-buffer-project (:width 15 :face success))
	    (ivy-rich-switch-buffer-path (:width (lambda (x) (ivy-rich-switch-buffer-shorten-path x (ivy-rich-minibuffer-width 0.3))))))
	   :predicate
	   (lambda (cand) (get-buffer cand)))))

  (use-package ivy
	 :ensure t
	 :config
	 (ivy-mode 1)
	 (setq ivy-use-virtual-buffers t)
	 (setq enable-recursive-minibuffers t)
	 (setq ivy-height 15)
	 ;; enable this if you want `swiper' to use it
	 ;; (setq search-default-mode #'char-fold-to-regexp)
	 (global-set-key "\C-s" 'swiper)
	 (global-set-key  (kbd "M-x") 'counsel-M-x)
	 (setq ivy-re-builders-alist '((t . ivy--regex-fuzzy))))
	 (define-key ivy-minibuffer-map (kbd "TAB") 'ivy-next-line)
	 (define-key ivy-minibuffer-map (kbd "<backtab>") 'ivy-previous-line)

  (use-package ivy-rich
    :ensure t
    :config
    (require 'ivy-rich)
    (ivy-rich-mode 1))

  (use-package ivy-hydra
    :ensure t)
#+END_SRC
** Bracket pairs
#+BEGIN_SRC emacs-lisp
  (setq electric-pair-pairs '(
			     (?\{ . ?\})
			     (?\( . ?\))
			     (?\[ . ?\])
			     (?\" . ?\")
			     ))
  (electric-pair-mode 1)
#+END_SRC
** Dasboard
#+BEGIN_SRC emacs-lisp
  (use-package dashboard
    :ensure t
    :config
    (dashboard-setup-startup-hook)
    (setq dashboard-startup-banner "~/dotfiles/emacs/.emacs.d/icons/logo.png")
    (setq dashboard-items '((recents  . 5)))
    (setq dashboard-set-heading-icons t)
    (setq dashboard-set-file-icons t)
    (setq dashboard-set-footer nil))
#+END_SRC
** Neotree
   #+BEGIN_SRC emacs-lisp
     (use-package neotree
       :ensure t
       :config
       (add-hook 'neotree-mode-hook
	       (lambda ()
		 (define-key evil-normal-state-local-map (kbd "q") 'neotree-hide)
		 (define-key evil-normal-state-local-map (kbd "RET") 'neotree-enter)
		 (define-key evil-normal-state-local-map (kbd "g") 'neotree-refresh)
		 (define-key evil-normal-state-local-map (kbd "n") 'neotree-next-line)
		 (define-key evil-normal-state-local-map (kbd "p") 'neotree-previous-line)
		 (define-key evil-normal-state-local-map (kbd "A") 'neotree-stretch-toggle)
		 (define-key evil-normal-state-local-map (kbd "I")'neotree-hidden-file-toggle)))
       (setq neo-theme (if (display-graphic-p) 'icons 'arrow))
       (setq neo-smart-open t)
       (setq neo-window-fixed-size nil)
       (setq neo-window-width 40)
       (require 'neotree)
       (global-set-key [f8] 'neotree-toggle))
   #+END_SRC
** All the icons
#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons
    :ensure t)

  (use-package all-the-icons-ivy
    :ensure t
    :config
    (all-the-icons-ivy-setup))

  (use-package all-the-icons-dired
    :ensure t
    :init
    (add-hook 'dired-mode-hook 'all-the-icons-dired-mode))
#+END_SRC
run (M-x all-the-icons-install-fonts) after the package installs
** Disable Autosave
#+BEGIN_SRC emacs-lisp
  (setq make-backup-files nil)
#+END_SRC
** Which key setup
*** Installation and Initialization
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t            ;; makes sure package is installed
    :init
    (which-key-mode))
#+END_SRC
** Swiper
#+BEGIN_SRC emacs-lisp
  (use-package swiper
    :ensure t)
#+END_SRC
** Evil
*** Automatic install 
#+BEGIN_SRC emacs-lisp
  (use-package evil
    :ensure t
    :init
    (setq evil-want-integration t) ;; This is optional since it's already set to t by default.
    :config
    (evil-mode 1))

  (use-package evil-org
    :ensure t
    :after org
    :config
    (add-hook 'org-mode-hook 'evil-org-mode)
    (add-hook 'evil-org-mode-hook
	      (lambda ()
		(evil-org-set-key-theme)))
    (require 'evil-org-agenda)
    (evil-org-agenda-set-keys))
#+End_SRC
** Flycheck
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :ensure t
    :init
    (global-flycheck-mode t))
#+END_SRC
** Magit
*** Automatic install
#+BEGIN_SRC emacs-lisp
  (unless (package-installed-p 'magit)
  (package-refresh-contents)
    (package-install 'magit))
#+END_SRC
** Parenthesis
(show-paren-mode 1)
** Rainbow Delimiter
  For parenthesis
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :init
      (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
#+END_SRC
** Rainbow Mode
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-mode
    :ensure t
    :init
    (add-hook 'prog-mode-hook 'rainbow-mode))
  (show-paren-mode 1)
#+END_SRC
** Evil Normal State Always
#+BEGIN_SRC emacs-lisp
    (setq evil-normal-state-modes
	  (append evil-emacs-state-modes
		  evil-insert-state-modes
		  evil-normal-state-modes
		  evil-motion-state-modes))
#+END_SRC
** Spaceline
#+BEGIN_SRC emacs-lisp
  (use-package spaceline
    :ensure t
    :config
    (require 'spaceline-config)
      (setq spaceline-buffer-encoding-abbrev-p nil)
      (setq spaceline-line-column-p nil)
      (setq spaceline-line-p nil)
      (setq powerline-default-separator (quote arrow))
      (spaceline-spacemacs-theme)
      (setq winum-auto-setup-mode-line nil)
      (spaceline-toggle-minor-modes-off)
      (spaceline-toggle-flycheck-error-on)
      (spaceline-toggle-flycheck-warning-on))
#+END_SRC
** Pretty Symbols
#+BEGIN_SRC emacs-lisp
  (when window-system
	(use-package pretty-mode
	:ensure t
	:config
	(global-pretty-mode t)))
#+END_SRC
** Avy
#+BEGIN_SRC emacs-lisp
 (use-package avy
    :ensure t)
  (define-key evil-normal-state-map (kbd "SPC s s") 'avy-goto-char)
#+END_SRC
* Alias
** Yes/No 
#+BEGIN_SRC emacs-lisp
(defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC
* General show hide stuff 
** Removing ugly UI
#+BEGIN_SRC emacs-lisp
  (tool-bar-mode -1)
  (setq inhibit-startup-message t)
  (menu-bar-mode -1)
  (scroll-bar-mode -1) 
  (global-visual-line-mode 1)
#+END_SRC
** Line numbering
#+BEGIN_SRC emacs-lisp
(global-display-line-numbers-mode 1)
(setq display-line-numbers-type 'relative)
#+END_SRC
** Spaceline
#+BEGIN_SRC emacs-lisp
  (use-package spaceline
    :ensure t
    :config
    (require 'spaceline-config)
    (setq powerline-default-seperator (quote wave))
    (spaceline-toggle-evil-state-on)
    (spaceline-toggle-flycheck-error-on)
    (spaceline-toggle-flycheck-warning-on)
    (setq spaceline-helm-mode 1)
    (spaceline-spacemacs-theme))
#+END_SRC
* Shortcuts
** Edit
#+BEGIN_SRC emacs-lisp
  (defun config-visit()
    (interactive)
    (find-file "~/.emacs.d/config.org"))
  (define-key evil-normal-state-map (kbd "SPC e c") 'config-visit)
#+END_SRC
** Reload
#+BEGIN_SRC emacs-lisp
  (defun config-reload()
    (interactive)
    (org-babel-load-file (expand-file-name "~/.emacs.d/config.org")))
  (define-key evil-normal-state-map (kbd "SPC r c") 'config-reload)
#+END_SRC
** Compile C++
#+BEGIN_SRC emacs-lisp
  (define-key evil-normal-state-map (kbd "<f3>") 'compile)
#+END_SRC
** VIM like keybindings
*** Windows
#+BEGIN_SRC emacs-lisp
  (define-key evil-normal-state-map (kbd "SPC w w") 'other-window)
  (define-key evil-normal-state-map (kbd "SPC w l") 'evil-window-right)
  (define-key evil-normal-state-map (kbd "SPC w k") 'evil-window-up)
  (define-key evil-normal-state-map (kbd "SPC w j") 'evil-window-down)
  (define-key evil-normal-state-map (kbd "SPC w h") 'evil-window-left)
  (define-key evil-normal-state-map (kbd "SPC w v") 'evil-window-vsplit)
  (define-key evil-normal-state-map (kbd "SPC w s") 'evil-window-split)
  (define-key evil-normal-state-map (kbd "SPC w c") 'delete-window)
  (define-key evil-normal-state-map (kbd "SPC w O") 'delete-other-windows)
  (define-key evil-normal-state-map (kbd "SPC w >") 'evil-window-increase-width)
  (define-key evil-normal-state-map (kbd "SPC w <") 'evil-window-decrease-width)
#+END_SRC
*** Buffers
#+BEGIN_SRC emacs-lisp
  (define-key evil-normal-state-map (kbd "SPC b B") 'ivy-switch-buffer)
  (define-key evil-normal-state-map (kbd "SPC b ]") 'next-buffer)
  (define-key evil-normal-state-map (kbd "SPC b [") 'previous-buffer)
  (define-key evil-normal-state-map (kbd "SPC b k") 'kill-buffer)
#+END_SRC
*** IVY
#+BEGIN_SRC emacs-lisp
    (define-key evil-normal-state-map (kbd "SPC .") 'counsel-find-file)
    (define-key evil-normal-state-map (kbd "SPC :") 'counsel-M-x)
#+END_SRC
*** Toggle
    #+BEGIN_SRC emacs-lisp
      (define-key evil-normal-state-map (kbd "SPC t e") 'electric-pair-mode)
    #+END_SRC
* Synatax Highlighting
#+BEGIN_SRC emacs-lisp
  (global-font-lock-mode t)
  (setq font-lock-maximum-decoration t)
#+END_SRC
* AutoCompletion
** Company
  #+BEGIN_SRC emacs-lisp
    (use-package company
      :ensure t
      :config
      (setq company-idle-delay 0)
      (setq company-minimum-prefix-length 3))

    (with-eval-after-load 'company
      (define-key company-active-map (kbd "M-n") nil)
      (define-key company-active-map (kbd "M-p") nil)
      (define-key company-active-map (kbd "<tab>") 'company-select-next)
      (define-key company-active-map (kbd "<backtab>") 'company-select-previous)
      (define-key company-active-map (kbd "RET") 'company-complete-selection)
      (define-key company-active-map (kbd "SPC") 'company-abort))
  #+END_SRC
** Languages
*** C/C++
    Yasnippet Is not Configured
#+BEGIN_SRC emacs-lisp
  (use-package flycheck-clang-analyzer
    :ensure t
    :config
    (with-eval-after-load 'flycheck
      (require 'flycheck-clang-analyzer)
       (flycheck-clang-analyzer-setup)))

  (with-eval-after-load 'company
    (add-hook 'c++-mode-hook 'company-mode)
    (add-hook 'c-mode-hook 'company-mode))

  (use-package company-c-headers
    :ensure t)

  (use-package company-irony
    :ensure t
    :config
    (setq company-backends '((company-c-headers
			      company-dabbrev-code
			      company-irony))))

  (use-package irony
    :ensure t
    :config
    (add-hook 'c++-mode-hook 'irony-mode)
    (add-hook 'c-mode-hook 'irony-mode)
    (add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options))
#+END_SRC
*** Emacs-Lisp
    Yasnippet Is not COnfigured
#+BEGIN_SRC emacs-lisp
  (add-hook 'emacs-lisp-mode-hook 'eldoc-mode)
  (add-hook 'emacs-lisp-mode-hook 'company-mode)

  (use-package slime
    :ensure t
    :config
    (setq inferior-lisp-program "/usr/bin/sbcl")
    (setq slime-contribs '(slime-fancy)))

  (use-package slime-company
    :ensure t
    :init
      (require 'company)
      (slime-setup '(slime-fancy slime-company)))
#+END_SRC
* Org Mode
** Org Bullets
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t
    :config
      (add-hook 'org-mode-hook (lambda () (org-bullets-mode))))
#+END_SRC
* Rainbow-Identifiers
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-identifiers
    :ensure t)
  (add-hook 'prog-mode-hook 'rainbow-identifiers-mode)
#+END_SRC
sdfafac
