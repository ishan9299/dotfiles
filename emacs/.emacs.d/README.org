* Terminal
** Setting default shell tmux
   #+BEGIN_SRC emacs-lisp
  (defvar my-term-shell "/bin/bash")
  (defadvice ansi-term (before force-bash)
    (interactive (list my-term-shell)))
  (ad-activate 'ansi-term)
   #+END_SRC
** Setting the shortcut as super and enter for ansi term
   #+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "<M-return>") 'ansi-term)
   #+END_SRC
* Plugins
** Beacon
#+BEGIN_SRC emacs-lisp
  (use-package beacon
    :ensure t
    :init
    (beacon-mode 1))
#+END_SRC
** Diminish
   #+BEGIN_SRC emacs-lisp
     (use-package diminish
       :ensure t
       :init
       (diminish 'which-key-mode)
       (diminish 'undo-tree-mode)
       (diminish 'linum-relative-mode)
       (diminish 'visual-line-mode)
       (diminish 'page-break-lines-mode)
       (diminish 'evil-org-mode)
       (diminish 'beacon-mode)
       (diminish 'irony-mode)
       (diminish 'rainbow-delimiters-mode)
       (diminish 'rainbow-mode)
       (diminish 'flycheck-mode)
       (diminish 'helm-mode))
   #+END_SRC
** Async (helm)
#+BEGIN_SRC emacs-lisp
  (use-package async
    :ensure t
    :init
    (async-bytecomp-package-mode 1))
#+END_SRC
** Helm
#+BEGIN_SRC emacs-lisp
  (use-package helm
    :after async
    :ensure t
    :init
    (helm-mode 1))
  (global-set-key (kbd "C-x b") 'helm-buffers-list)
  (global-set-key (kbd "C-x C-f") 'helm-find-files)
  (define-key helm-map (kbd "C-j") 'helm-next-line)
  (define-key helm-map (kbd "C-k") 'helm-previous-line)
  (global-set-key (kbd "M-x") 'helm-M-x)
  (define-key helm-find-files-map (kbd "<tab>") 'helm-execute-persistent-action)
  (setq helm-M-x-fuzzy-match t)
  (require 'helm-config)
#+END_SRC
** Bracket pairs
#+BEGIN_SRC emacs-lisp
  (setq electric-pair-pairs '(
			     (?\{ . ?\})
			     (?\( . ?\))
			     (?\[ . ?\])
			     (?\" . ?\")
			     ))
  (electric-pair-mode t)
#+END_SRC
** Dasboard
#+BEGIN_SRC emacs-lisp
  (use-package dashboard
    :ensure t
    :config
    (dashboard-setup-startup-hook)
    (setq dashboard-startup-banner "~/dotfiles/emacs/.emacs.d/icons/logo.png")
    (setq dashboard-items '((recents  . 5)))
    (setq dashboard-set-heading-icons t)
    (setq dashboard-set-file-icons t)
    (setq dashboard-set-footer nil))
#+END_SRC
** All the icons
#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons
    :ensure t)
#+END_SRC
run (M-x all-the-icons-install-fonts) after the package installs
** Disable Autosave
#+BEGIN_SRC emacs-lisp
  (setq make-backup-files nil)
#+END_SRC
** Which key setup
*** Installation and Initialization
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t            ;; makes sure package is installed
    :init
    (which-key-mode))
#+END_SRC
** Swiper
#+BEGIN_SRC emacs-lisp
  (use-package swiper
    :ensure t
    :bind ("C-s" . 'swiper))
#+END_SRC
** Evil
*** Automatic install 
#+BEGIN_SRC emacs-lisp
  (use-package evil
    :ensure t
    :init
    (setq evil-want-integration t) ;; This is optional since it's already set to t by default.
    (setq evil-want-keybinding nil)
    :config
    (evil-mode 1))

  (use-package evil-collection
    :after evil
    :ensure t
    :init
    (evil-collection-init))

  (use-package evil-org
    :ensure t
    :after org
    :config
    (add-hook 'org-mode-hook 'evil-org-mode)
    (add-hook 'evil-org-mode-hook
	      (lambda ()
		(evil-org-set-key-theme)))
    (require 'evil-org-agenda)
    (evil-org-agenda-set-keys))
#+End_SRC
** Flycheck
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :ensure t
    :init
    (global-flycheck-mode t))
#+END_SRC
** Magit
*** Automatic install
#+BEGIN_SRC emacs-lisp
  (unless (package-installed-p 'magit)
  (package-refresh-contents)
    (package-install 'magit))
#+END_SRC
** Parenthesis
(show-paren-mode 1)
** Rainbow Delimiter
  For parenthesis
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :init
      (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
#+END_SRC
** Rainbow Mode
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-mode
    :ensure t
    :init
    (add-hook 'prog-mode-hook 'rainbow-mode))
  (show-paren-mode 1)
#+END_SRC
** Spaceline
#+BEGIN_SRC emacs-lisp
  (use-package spaceline
    :ensure t
    :config
    (require 'spaceline-config)
      (setq spaceline-buffer-encoding-abbrev-p nil)
      (setq spaceline-line-column-p nil)
      (setq spaceline-line-p nil)
      (setq powerline-default-separator (quote arrow))
      (spaceline-spacemacs-theme))
#+END_SRC
** Pretty Symbols
#+BEGIN_SRC emacs-lisp
  (when window-system
	(use-package pretty-mode
	:ensure t
	:config
	(global-pretty-mode t)))
#+END_SRC
* Alias
** Yes/No 
#+BEGIN_SRC emacs-lisp
(defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC

* General show hide stuff 
** Removing ugly UI
#+BEGIN_SRC emacs-lisp
  (tool-bar-mode -1)
  (setq inhibit-startup-message t)
  (menu-bar-mode -1)
  (scroll-bar-mode -1) 
  (global-visual-line-mode 1)
#+END_SRC
** Line numbering
#+BEGIN_SRC emacs-lisp
(global-display-line-numbers-mode 1)
(setq display-line-numbers-type 'relative)
#+END_SRC
** Spaceline
#+BEGIN_SRC emacs-lisp
  (use-package spaceline
    :ensure t
    :config
    (require 'spaceline-config)
    (setq powerline-default-seperator (quote wave))
    (spaceline-toggle-evil-state-on)
    (spaceline-toggle-flycheck-error-on)
    (spaceline-toggle-flycheck-warning-on)
    (setq spaceline-helm-mode 1)
    (spaceline-spacemacs-theme))
#+END_SRC
* Avy
#+BEGIN_SRC emacs-lisp
  (use-package avy
    :ensure t
    :bind
    ("M-s" . avy-goto-char))
#+END_SRC
* Shortcuts
** Edit
#+BEGIN_SRC emacs-lisp
  (defun config-visit()
    (interactive)
    (find-file "~/.emacs.d/config.org"))
  (global-set-key (kbd "C-c e") 'config-visit)
#+END_SRC
** Reload
#+BEGIN_SRC emacs-lisp
  (defun config-reload()
    (interactive)
    (org-babel-load-file (expand-file-name "~/.emacs.d/config.org")))
  (global-set-key (kbd "C-c r") 'config-reload)
#+END_SRC
** Compile C++
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c c") 'compile)
#+END_SRC
* Synatax Highlighting
#+BEGIN_SRC emacs-lisp
  (global-font-lock-mode t)
  (setq font-lock-maximum-decoration t)
#+END_SRC
* AutoCompletion
** Company
  #+BEGIN_SRC emacs-lisp
    (use-package company
      :ensure t
      :config
      (setq company-idle-delay 0)
      (setq company-minimum-prefix-length 3))

    (with-eval-after-load 'company
      (define-key company-active-map (kbd "M-n") nil)
      (define-key company-active-map (kbd "M-p") nil)
      (define-key company-active-map (kbd "j") #'company-select-next)
      (define-key company-active-map (kbd "k") #'company-select-previous)
      (define-key company-active-map (kbd "SPC") #'company-abort))
  #+END_SRC
** Languages
*** C/C++
    Yasnippet Is not Configured
#+BEGIN_SRC emacs-lisp
  (use-package flycheck-clang-analyzer
    :ensure t
    :config
    (with-eval-after-load 'flycheck
      (require 'flycheck-clang-analyzer)
       (flycheck-clang-analyzer-setup)))

  (with-eval-after-load 'company
    (add-hook 'c++-mode-hook 'company-mode)
    (add-hook 'c-mode-hook 'company-mode))

  (use-package company-c-headers
    :ensure t)

  (use-package company-irony
    :ensure t
    :config
    (setq company-backends '((company-c-headers
			      company-dabbrev-code
			      company-irony))))

  (use-package irony
    :ensure t
    :config
    (add-hook 'c++-mode-hook 'irony-mode)
    (add-hook 'c-mode-hook 'irony-mode)
    (add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options))
#+END_SRC
*** Emacs-Lisp
    Yasnippet Is not COnfigured
#+BEGIN_SRC emacs-lisp
  (add-hook 'emacs-lisp-mode-hook 'eldoc-mode)
  (add-hook 'emacs-lisp-mode-hook 'company-mode)

  (use-package slime
    :ensure t
    :config
    (setq inferior-lisp-program "/usr/bin/sbcl")
    (setq slime-contribs '(slime-fancy)))

  (use-package slime-company
    :ensure t
    :init
      (require 'company)
      (slime-setup '(slime-fancy slime-company)))
#+END_SRC
* Org Mode
** Org Bullets
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t
    :config
      (add-hook 'org-mode-hook (lambda () (org-bullets-mode))))
#+END_SRC
* Rainbow-Identifiers
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-identifiers
    :ensure t)
  (add-hook 'prog-mode-hook 'rainbow-identifiers-mode)
#+END_SRC
